"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.holidaysRD=exports.countBusinessDays=exports.nextLongWeekend=exports.upcomingLongWeekends=exports.isLongWeekend=exports.getLongWeekendsOfMonth=exports.getLongWeekends=exports.upcomingHolidays=exports.nextHoliday=exports.getHolidaysOfMonth=exports.getHolidays=exports.isHoliday=exports.getHolidaysChangeByYear=exports.getHolidaysDoNotChange=void 0;const helper_1=require("./utils/helper.min.js");let _holidaysRD=[];function existHolidays(e){return _holidaysRD.some((a=>{return n=a.date,parseInt(n.substring(6,10))===e;var n}))}const assignHolidays=e=>{_holidaysRD.push(...getHolidaysDoNotChange(e)),_holidaysRD.push(...getHolidaysChangeByYear(e)),_holidaysRD.sort(((e,a)=>e.dayOfYear-a.dayOfYear))};function getHolidaysDoNotChange(e){const a=[];let n,o=`01-01-${e}`,t=(0,helper_1.getDayName)(new Date(o));a.push({dayOfYear:1,celebration:"Año Nuevo",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)}),o=`01-21-${e}`,t=(0,helper_1.getDayName)(new Date(o)),a.push({dayOfYear:21,celebration:"día de la Altagracia",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)}),o=`02-27-${e}`,t=(0,helper_1.getDayName)(new Date(o)),a.push({dayOfYear:58,celebration:"día de la Independencia",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)}),o=`08-16-${e}`,t=(0,helper_1.getDayName)(new Date(o)),a.push({dayOfYear:228,celebration:"día de la Restauración",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)}),o=`09-24-${e}`,t=(0,helper_1.getDayName)(new Date(o)),a.push({dayOfYear:267,celebration:"día de las Mercedes",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)}),o=`12-25-${e}`,t=(0,helper_1.getDayName)(new Date(o)),a.push({dayOfYear:359,celebration:"Navidad",date:o,day:t,longWeekend:(0,helper_1.isDayLongWeekend)(t)});const d={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};n=(0,helper_1.addDays)((0,helper_1.Computus)(e),-2),d.dayOfYear=(0,helper_1.getDayOfYear)(n),d.celebration="Viernes Santo",d.date=(0,helper_1.getDateOfDay)(e,d.dayOfYear),d.day=(0,helper_1.getDayName)(n),d.longWeekend=(0,helper_1.isDayLongWeekend)(d.day),a.push(d);const r={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};return n=(0,helper_1.addDays)((0,helper_1.Computus)(e),60),r.dayOfYear=(0,helper_1.getDayOfYear)(n),r.celebration="Corpus Christi",r.date=(0,helper_1.getDateOfDay)(e,r.dayOfYear),r.day=(0,helper_1.getDayName)(n),r.longWeekend=(0,helper_1.isDayLongWeekend)(r.day),a.push(r),a}function getHolidaysChangeByYear(e){const a=[];let n;const o={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};n=(0,helper_1.setDay)(new Date(e,0,6)),o.dayOfYear=(0,helper_1.getDayOfYear)(n),o.celebration="día de los Santos Reyes",o.date=(0,helper_1.getDateOfDay)(e,o.dayOfYear),o.day=(0,helper_1.getDayName)(n),o.longWeekend=(0,helper_1.isDayLongWeekend)(o.day),a.push(o);const t={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};n=(0,helper_1.setDay)(new Date(e,0,26)),t.dayOfYear=(0,helper_1.getDayOfYear)(n),t.celebration="día de Duarte",t.date=(0,helper_1.getDateOfDay)(e,t.dayOfYear),t.day=(0,helper_1.getDayName)(n),t.longWeekend=(0,helper_1.isDayLongWeekend)(t.day),a.push(t);const d={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};n=(0,helper_1.setDay)(new Date(e,4,1)),d.dayOfYear=(0,helper_1.getDayOfYear)(n),d.celebration="día del trabajo",d.date=(0,helper_1.getDateOfDay)(e,d.dayOfYear),d.day=(0,helper_1.getDayName)(n),d.longWeekend=(0,helper_1.isDayLongWeekend)(d.day),a.push(d);const r={dayOfYear:0,celebration:"",date:"",day:"",longWeekend:!1};return n=(0,helper_1.setDay)(new Date(e,10,6)),r.dayOfYear=(0,helper_1.getDayOfYear)(n),r.celebration="día de la constitución",r.date=(0,helper_1.getDateOfDay)(e,r.dayOfYear),r.day=(0,helper_1.getDayName)(n),r.longWeekend=(0,helper_1.isDayLongWeekend)(r.day),a.push(r),a}function isHoliday(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();1!=existHolidays(a)&&(_holidaysRD=[],assignHolidays(a));const n=(0,helper_1.formatDate)(e);return _holidaysRD.some((e=>e.date===n))}function getHolidays(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();return 1!=existHolidays(a)&&(_holidaysRD=[],assignHolidays(a)),_holidaysRD}function getHolidaysOfMonth(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear(),n=e.getMonth()+1;1!=existHolidays(a)&&(_holidaysRD=[],assignHolidays(a));const o=_holidaysRD.filter((e=>(e=>parseInt(e.substring(0,2)))(e.date)==n));return o}function nextHoliday(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();existHolidays(a)||assignHolidays(a);return getHolidays(e).find((a=>new Date(a.date)>=e))}function upcomingHolidays(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();existHolidays(a)||assignHolidays(a);return getHolidays(e).filter((a=>new Date(a.date)>=e))}function getLongWeekends(e){return existHolidays(e)||assignHolidays(e),_holidaysRD.filter((e=>e.longWeekend))}function getLongWeekendsOfMonth(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();existHolidays(a)||assignHolidays(a);const n=e.getMonth()+1;return getLongWeekends(a).filter((e=>parseInt(e.date.substring(0,2))===n))}function isLongWeekend(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();1!=existHolidays(a)&&(_holidaysRD=[],assignHolidays(a));const n=(0,helper_1.formatDate)(e);return _holidaysRD.some((e=>e.date===n&&e.longWeekend))}function upcomingLongWeekends(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();existHolidays(a)||assignHolidays(a);return getLongWeekends(a).filter((a=>new Date(a.date)>=e))}function nextLongWeekend(e=new Date){if(!(0,helper_1.isDate)(e))throw new TypeError("Fecha proporcionada invalida. verifique  que contenga un formato de fecha valida");const a=e.getFullYear();existHolidays(a)||assignHolidays(a);return getLongWeekends(a).find((a=>new Date(a.date)>=e))}function countBusinessDays(e=new Date,a=new Date){if(!(0,helper_1.isDate)(e)||!(0,helper_1.isDate)(a)||e>a)throw new Error("Las fechas proporcionadas son inválidas o la fecha de inicio es posterior a la fecha de fin.");let n=0,o=new Date(e);for(;o<=a;){const e=o.getDay(),a=(0,helper_1.formatDate)(o);0===e||6===e||_holidaysRD.some((e=>e.date===a))||n++,o=new Date(o.getTime()+864e5)}return n}exports.getHolidaysDoNotChange=getHolidaysDoNotChange,exports.getHolidaysChangeByYear=getHolidaysChangeByYear,exports.isHoliday=isHoliday,exports.getHolidays=getHolidays,exports.getHolidaysOfMonth=getHolidaysOfMonth,exports.nextHoliday=nextHoliday,exports.upcomingHolidays=upcomingHolidays,exports.getLongWeekends=getLongWeekends,exports.getLongWeekendsOfMonth=getLongWeekendsOfMonth,exports.isLongWeekend=isLongWeekend,exports.upcomingLongWeekends=upcomingLongWeekends,exports.nextLongWeekend=nextLongWeekend,exports.countBusinessDays=countBusinessDays,
/**
 * @module holidayRD
 * @fileoverview Librería holidayRD - Proporciona funciones para calcular y validar días feriados en la República Dominicana.
 * @description Esta librería es ideal para aplicaciones que requieren agendar citas o eventos, y necesitan saber si un día es feriado o no.
 *
 * @author Carlos I. Ynfante R. <https://github.com/CarlsRemy>
 * @license MIT
 * @copyright Carlos I. Ynfante R.
 * @version 0.0.1
*/
exports.holidaysRD={getHolidays:getHolidays,getHolidaysOfMonth:getHolidaysOfMonth,isHoliday:isHoliday,nextHoliday:nextHoliday,upcomingHolidays:upcomingHolidays,getLongWeekends:getLongWeekends,getLongWeekendsOfMonth:getLongWeekendsOfMonth,isLongWeekend:isLongWeekend,upcomingLongWeekends:upcomingLongWeekends,nextLongWeekend:nextLongWeekend,countBusinessDays:countBusinessDays};